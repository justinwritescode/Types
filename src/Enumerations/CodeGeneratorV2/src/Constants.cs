namespace JustinWritesCode.Enumerations.CodeGeneration;

public static class Constants
{
    public const string Header =
    $$$"""
    /*
     * <auto-generated>
     *     This code was generated by {{{ThisAssembly.Project.RepositoryUrl}}}
     *
     *     Changes to this file may cause incorrect behavior and will be lost if
     *     the code is regenerated.
     * </auto-generated>
     *
     * Filename: {{ file_name }}
     *   Generated: {{ timestamp }}
     */
    """;

    public static readonly Scriban.Template HeaderTemplate = Scriban.Template.Parse(Header);

    public static readonly string[] GenerateEnumerationTypeAttributes = new[]
    {
        GenerateEnumerationRecordClassAttribute,
        GenerateEnumerationRecordStructAttribute,
        GenerateEnumerationClassAttribute,
        GenerateEnumerationStructAttribute,
        GenerateEnumerationRecordClassAttribute.Replace(nameof(Attribute), string.Empty),
        GenerateEnumerationRecordStructAttribute.Replace(nameof(Attribute), string.Empty),
        GenerateEnumerationClassAttribute.Replace(nameof(Attribute), string.Empty),
        GenerateEnumerationStructAttribute.Replace(nameof(Attribute), string.Empty)
    };

    public const string GenerateEnumerationRecordClassAttribute = "GenerateEnumerationRecordClassAttribute";
    public const string GenerateEnumerationRecordStructAttribute = "GenerateEnumerationRecordStructAttribute";
    public const string GenerateEnumerationClassAttribute = "GenerateEnumerationClassAttribute";
    public const string GenerateEnumerationStructAttribute = "GenerateEnumerationStructAttribute";

    public const string GeneratedCodeAttribute = $"""System.CodeDom.Compiler.GeneratedCode("{ThisAssembly.Project.AssemblyName}", "{ThisAssembly.Info.FileVersion}")""";

    public const string GenerateEnumerationTypeAttributesDeclaration =
    $$"""""
    #if !GENERATED_ENUMERATION_TYPE_ATTRIBUTES
    #define GENERATED_ENUMERATION_TYPE_ATTRIBUTES

    using System.CodeDom.Compiler;

    #nullable enable
    [CompilerGenerated, {{GeneratedCodeAttribute}}, AttributeUsage(AttributeTargets.Enum)]
    internal abstract class GenerateEnumerationTypeAttribute : Attribute
    {
        public GenerateEnumerationTypeAttribute(string? EnumerationTypeName = null, string? Namespace =  null)
        {
        }
    }

    [CompilerGenerated, AttributeUsage(AttributeTargets.Enum)]
    internal abstract class GenerateEnumerationRecordTypeAttribute : GenerateEnumerationTypeAttribute
    {
        public GenerateEnumerationRecordTypeAttribute(string? EnumerationTypeName = null, string? Namespace = null) : base(EnumerationTypeName, Namespace)
        {
        }
    }

    [CompilerGenerated, AttributeUsage(AttributeTargets.Enum)]
    internal sealed class GenerateEnumerationRecordClassAttribute : GenerateEnumerationRecordTypeAttribute
    {
        public GenerateEnumerationRecordClassAttribute(string? EnumerationTypeName = null, string? Namespace = null) : base(EnumerationTypeName, Namespace)
        {
        }
    }

    [CompilerGenerated, AttributeUsage(AttributeTargets.Enum)]
    internal sealed class GenerateEnumerationRecordStructAttribute : GenerateEnumerationRecordTypeAttribute
    {
        public GenerateEnumerationRecordStructAttribute(string? EnumerationTypeName = null, string? Namespace = null) : base(EnumerationTypeName, Namespace)
        {
        }
    }

    [CompilerGenerated, AttributeUsage(AttributeTargets.Enum)]
    internal sealed class GenerateEnumerationClassAttribute : GenerateEnumerationTypeAttribute
    {
        public GenerateEnumerationClassAttribute(string? EnumerationTypeName = null, string? Namespace = null) : base(EnumerationTypeName, Namespace)
        {
        }
    }

    [CompilerGenerated, AttributeUsage(AttributeTargets.Enum)]
    internal sealed class GenerateEnumerationStructAttribute : GenerateEnumerationTypeAttribute
    {
        public GenerateEnumerationStructAttribute(string? EnumerationTypeName = null, string? Namespace = null) : base(EnumerationTypeName, Namespace)
        {
        }
    }

    #endif
    """"";

    public const string EnumerationTypeDeclarationResourceName = "EnumerationTypeDeclaration.cstemplate";

    public static readonly string EnumerationTypeDeclaration
        = new StreamReader(typeof(EnumerationTypeGenerator).Assembly.GetManifestResourceStream(EnumerationTypeDeclarationResourceName)!).ReadToEnd();

    public static readonly Scriban.Template EnumerationTypeDeclarationTemplate
        = Scriban.Template.Parse(EnumerationTypeDeclaration, Path.GetFullPath("Resources/" + EnumerationTypeDeclarationResourceName));
}
