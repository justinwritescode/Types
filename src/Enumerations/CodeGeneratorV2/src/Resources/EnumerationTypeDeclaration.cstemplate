#nullable enable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using JustinWritesCode.Enumerations;
using JustinWritesCode.Enumerations.Abstractions;
using JustinWritesCode.Abstractions;
using Convert = System.Convert;
using {{ enum_namespace }};

namespace {{ namespace }}
{
    {{ xml_doc }}
    [{{ generated_code_attribute }}]
    public partial {{ enumeration_type_type }} {{ enumeration_type_name }} : IEnumeration<{{ enumeration_type_name }}, int>, IComparable<{{ enumeration_type_name }}>, IEquatable<{{ enumeration_type_name }}>, IComparable, IFormattable, IConvertible
    #if NET7_0_OR_GREATER
    , IParsable<{{ enumeration_type_name }}>
    #endif
    {
        public {{ enumeration_type_name }}({{ enum_type_name }} value, int id, string? name = null, string? description = null)
        {
            Value = value;
            Id = id;
            Name = name ?? value.ToString();
            Description = description;
        }

        object IIdentifiable.Id => Id;
        object IHaveAValue.Value => Value;
        public {{ enum_type_name }} Value { get; private set; }

        {{~ for attribute in attributes ~}}
        public {{ attribute.value.name }} {{ attribute.key }} { get; private set; } = default!;
        {{ end ~}}

        public override string ToString() => Name;

        public static {{ enumeration_type_name }} FromValue({{ enum_type_name }} value) => FromValue(value, throwOnNotFound: true);
        public static {{ enumeration_type_name }} FromValue({{ enum_type_name }} value, bool throwOnNotFound)
        {
            var result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.Value.Equals(value));
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(value), value, $"The value {value} is not a valid {{ enumeration_type_name }}.");
            }

            return result;
        }

        public static {{ enumeration_type_name }} FromId(int id) => FromId(id, throwOnNotFound: true);
        public static {{ enumeration_type_name }} FromId(int id, bool throwOnNotFound)
        {
            var result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.Id == id);
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(id), id, $"The id {id} is not a valid {{ enumeration_type_name }}.");
            }

            return result;
        }

        public static {{ enumeration_type_name }} FromName(string name) => FromName(name, throwOnNotFound: true);
        public static {{ enumeration_type_name }} FromName(string name, bool throwOnNotFound)
        {
            var result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(name), name, $"The name {name} is not a valid {{ enumeration_type_name }}.");
            }

            return result;
        }

        public static {{ enumeration_type_name }} FromDescription(string description) => FromDescription(description, throwOnNotFound: true);
        public static {{ enumeration_type_name }} FromDescription(string description, bool throwOnNotFound)
        {
            var result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.Description.Equals(description, StringComparison.OrdinalIgnoreCase));
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(description), description, $"The description {description} is not a valid {{ enumeration_type_name }}.");
            }

            return result;
        }

        public static {{ enumeration_type_name }} FromShortName(string shortName) => FromDescription(shortName, throwOnNotFound: true);
        public static {{ enumeration_type_name }} FromShortName(string shortName, bool throwOnNotFound)
        {
            var result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.ShortName.Equals(shortName, StringComparison.OrdinalIgnoreCase));
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(shortName), shortName, $"The ShortName {shortName} is not a valid {{ enumeration_type_name }}.");
            }

            return result;
        }

        public static bool TryFromShortName(string shortName, out {{ enumeration_type_name }} result) => TryFromShortName(shortName, out result, throwOnNotFound: false);
        public static bool TryFromShortName(string shortName, out {{ enumeration_type_name }} result, bool throwOnNotFound)
        {
            result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.ShortName.Equals(shortName, StringComparison.OrdinalIgnoreCase));
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(shortName), shortName, $"The ShortName {shortName} is not a valid {{ enumeration_type_name }}.");
            }

            return result != default;
        }

        public static bool TryFromValue({{ enum_type_name }} value, out {{ enumeration_type_name }} result) => TryFromValue(value, out result, throwOnNotFound: false);
        public static bool TryFromValue({{ enum_type_name }} value, out {{ enumeration_type_name }} result, bool throwOnNotFound)
        {
            result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.Value.Equals(value));
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(value), value, $"The value {value} is not a valid {{ enumeration_type_name }}.");
            }

            return result != default;
        }

        public static bool TryFromId(int id, out {{ enumeration_type_name }} result) => TryFromId(id, out result, throwOnNotFound: false);
        public static bool TryFromId(int id, out {{ enumeration_type_name }} result, bool throwOnNotFound)
        {
            result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.Id == id);
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(id), id, $"The id {id} is not a valid {{enumeration_type_name}}.");
            }

            return result != default;
        }

        public static bool TryFromName(string name, out {{ enumeration_type_name }} result) => TryFromName(name, out result, throwOnNotFound: false);
        public static bool TryFromName(string name, out {{ enumeration_type_name }} result, bool throwOnNotFound)
        {
            result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(name), name, $"The name {name} is not a valid {{ enumeration_type_name }}.");
            }

            return result != default;
        }

        public static bool TryFromDescription(string description, out {{ enumeration_type_name }} result) => TryFromDescription(description, out result, throwOnNotFound: false);
        public static bool TryFromDescription(string description, out {{ enumeration_type_name }} result, bool throwOnNotFound)
        {
            result = {{ enumeration_type_name }}.All.FirstOrDefault(x => x.Description.Equals(description, StringComparison.OrdinalIgnoreCase));
            if (result == default && throwOnNotFound)
            {
                throw new ArgumentOutOfRangeException(nameof(description), description, $"The description {description} is not a valid {{ enumeration_type_name }}.");
            }

            return result != default;
        }

        public static IEnumerable<{{ enumeration_type_name }}> GetAll() => {{ enumeration_type_name }}.All;

        public static IEnumerable<{{ enumeration_type_name }}> GetAllExcept(params {{ enumeration_type_name }}[] except) => {{ enumeration_type_name }}.All.Except(except);

        public static IEnumerable<{{ enumeration_type_name }}> GetAllExcept(params {{ enum_type_name }}[] except) => {{ enumeration_type_name }}.All.Except(except.Select(x => {{ enumeration_type_name }}.FromValue(x)));

        public static IEnumerable<{{ enumeration_type_name }}> GetAllExcept(params int[] except) => {{ enumeration_type_name }}.All.Except(except.Select(x => {{ enumeration_type_name }}.FromId(x)));

        public static IEnumerable<{{ enumeration_type_name }}> GetAllExcept(params string[] except) => {{ enumeration_type_name }}.All.Except(except.Select(x => {{ enumeration_type_name }}.FromName(x)));

        #region IConvertible
        public TypeCode GetTypeCode() => TypeCode.Object;
        public bool ToBoolean(IFormatProvider? provider) => this.Value != default;
        public byte ToByte(IFormatProvider? provider) => Convert.ToByte(this.Value);
        public char ToChar(IFormatProvider? provider) => Convert.ToChar(this.Value);
        public DateTime ToDateTime(IFormatProvider? provider) => Convert.ToDateTime(this.Value);
        public decimal ToDecimal(IFormatProvider? provider) => Convert.ToDecimal(this.Value);
        public double ToDouble(IFormatProvider? provider) => Convert.ToDouble(this.Value);
        public short ToInt16(IFormatProvider? provider) => Convert.ToInt16(this.Value);
        public int ToInt32(IFormatProvider? provider) => Convert.ToInt32(this.Value);
        public long ToInt64(IFormatProvider? provider) => Convert.ToInt64(this.Value);
        public sbyte ToSByte(IFormatProvider? provider) => Convert.ToSByte(this.Value);
        public float ToSingle(IFormatProvider? provider) => Convert.ToSingle(this.Value);
        public string ToString(IFormatProvider? provider) => DisplayName;
        public object ToType(type conversionType, IFormatProvider? provider) => Convert.ChangeType(this.Value, conversionType);
        public ushort ToUInt16(IFormatProvider? provider) => Convert.ToUInt16(this.Value);
        public uint ToUInt32(IFormatProvider? provider) => Convert.ToUInt32(this.Value);
        public ulong ToUInt64(IFormatProvider? provider) => Convert.ToUInt64(this.Value);
        #endregion

        public int CompareTo({{ enumeration_type_name }} other) => Value.CompareTo(other.Value);
        public int CompareTo(object? other) => other is {{ enumeration_type_name }} _{{ enumeration_type_name }} ? CompareTo(_{{ enumeration_type_name }}) : throw new ArgumentOutOfRangeException(nameof(other), other, $"The value provided was not of the correct type ({{~ enumeration_type_name ~}})");
        public string ToString(string? format, IFormatProvider? formatProvider) => ToString();

        public static readonly {{ enumeration_type_name }}[] All = new[]
        {
            {{ for member in members }}
            {{ enumeration_type_name }}.{{ member.value.name }}.Instance,
            {{ end }}
        };

        #region IParsable
        public static {{ enumeration_type_name }} Parse(string s, IFormatProvider? format = null)
            => TryParse(s, out var result) ? result :
                throw new ArgumentOutOfRangeException(nameof(s), s, $"The value {s} is not a valid {{ enumeration_type_name }}.");

        public static bool TryParse(string s, out {{ enumeration_type_name }} result)
            => (result =
                TryFromName(s, out result) ? result :
                TryFromDescription(s, out result) ? result :
                TryFromShortName(s, out result) ? result : default) != default;

        public static bool TryParse(string? s, IFormatProvider? format, out {{ enumeration_type_name }} result)
            => (result =
                TryFromName(s, out result) ? result :
                TryFromDescription(s, out result) ? result :
                TryFromShortName(s, out result) ? result : default) != default;
        #endregion

        public static readonly int Count = {{ enumeration_type_name }}.All.Length;

        public FieldInfo? FieldInfo => typeof({{ enum_type_name }}).GetRuntimeField(Name);

        public TAttribute? GetCustomAttribute<TAttribute>()
            where TAttribute : Attribute
            => FieldInfo.GetCustomAttribute<TAttribute>();

        public static bool operator <({{ enumeration_type_name }} left, {{ enumeration_type_name }} right) => left.CompareTo(right) < 0;
        public static bool operator <=({{ enumeration_type_name }} left, {{ enumeration_type_name }} right) => left.CompareTo(right) <= 0;
        public static bool operator >({{ enumeration_type_name }} left, {{ enumeration_type_name }} right) => left.CompareTo(right) > 0;
        public static bool operator >=({{ enumeration_type_name }} left, {{ enumeration_type_name }} right) => left.CompareTo(right) >= 0;
        // public static bool operator ==({{ enumeration_type_name }} left, {{ enumeration_type_name }} right) => left.Equals(right);
        // public static bool operator !=({{ enumeration_type_name }} left, {{ enumeration_type_name }} right) => !left.Equals(right);


        {{ for member in members }}
        {{ member.value.xml_doc }}
        [{{ generated_code_attribute }}]
        public static class {{ member.value.name }}
        {
            public static readonly {{ enumeration_type_name }} Instance = new {{ enumeration_type_name }}(({{ enum_type_name }})({{ member.value.value }}), {{ member.value.value }}, "{{ member.value.name }}")
            {
                {{~ for attribute in member.value.attributes ~}}
                {{~ if attribute.value.type == "System.String" ~}}
                {{ attribute.key }} = "{{ attribute.value.value ~}}",
                {{~ else ~}}
                {{ attribute.key }} = {{ attribute.value.value ~}},
                {{~ end ~}}
                {{~ end ~}}
            };

            public const {{ enum_type_name }} Value = ({{ enum_type_name }})({{ member.value.value }});

            {{ for attribute in member.value.attributes ~}}
            public const {{ attribute.value.type ~}}
            {{~ if attribute.value.type == "System.String" ~}}
            {{ attribute.key }} = "{{ attribute.value.value ~}}";
            {{~ else ~}}
            {{ attribute.key }} = {{ attribute.value.value ~}};
            {{~ end ~}}
            {{~ end ~}}
        }
        {{ end }}
    }
}
